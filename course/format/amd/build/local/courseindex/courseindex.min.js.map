{"version":3,"file":"courseindex.min.js","sources":["../../../src/local/courseindex/courseindex.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/courseindex/courseindex\n * @class     core_courseformat/local/courseindex/courseindex\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport Collapse from 'theme_boost/bootstrap/collapse';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\nimport Pending from 'core/pending';\nimport log from \"core/log\";\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'courseindex';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_item']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            CM: `[data-for='cm']`,\n            TOGGLER: `[data-action=\"togglecourseindexsection\"]`,\n            COLLAPSE: `[data-bs-toggle=\"collapse\"]`,\n            DRAWER: `.drawer`,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            SECTIONHIDDEN: 'dimmed',\n            CMHIDDEN: 'dimmed',\n            SECTIONCURRENT: 'current',\n            COLLAPSED: `collapsed`,\n            SHOW: `show`,\n            PAGEITEM: 'pageitem',\n        };\n        // Arrays to keep cms and sections elements.\n        this.sections = {};\n        this.cms = {};\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        let element = document.querySelector(target);\n        // TODO Remove this if condition as part of MDL-83851.\n        if (!element) {\n            log.debug('Init component with id is deprecated, use a query selector instead.');\n            element = document.getElementById(target);\n        }\n        return new this({\n            element,\n            reactive: getCurrentCourseEditor(),\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        this.addEventListener(this.element, 'click', this._triggerHashChange);\n\n        // Get cms and sections elements.\n        const sections = this.getElements(this.selectors.SECTION);\n        sections.forEach((section) => {\n            this.sections[section.dataset.id] = section;\n        });\n        const cms = this.getElements(this.selectors.CM);\n        cms.forEach((cm) => {\n            this.cms[cm.dataset.id] = cm;\n        });\n\n        this._expandPageCmSectionIfNecessary(state);\n        this._refreshPageItemGivenItem(state, state.course.pageItem);\n\n        // Configure Aria Tree.\n        this.contentTree = new ContentTree(this.element, this.selectors, this.reactive.isEditing);\n    }\n\n    getWatchers() {\n        return [\n            {watch: `section.indexcollapsed:updated`, handler: this._refreshSectionCollapsed},\n            {watch: `cm:created`, handler: this._createCm},\n            {watch: `cm:deleted`, handler: this._deleteCm},\n            {watch: `section:created`, handler: this._createSection},\n            {watch: `section:deleted`, handler: this._deleteSection},\n            {watch: `course.pageItem:created`, handler: this._refreshPageItem},\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\n            // Sections and cm sorting.\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n        ];\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course index element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _sectionTogglers(event) {\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        const isChevron = event.target.closest(this.selectors.COLLAPSE);\n\n        if (sectionlink || isChevron) {\n\n            const section = event.target.closest(this.selectors.SECTION);\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            let isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n            // If the click was on the chevron, Bootstrap already toggled the section before this event.\n            if (isChevron) {\n                isCollapsed = !isCollapsed;\n            }\n\n            // Update the state.\n            const sectionId = section.getAttribute('data-id');\n            if (!sectionlink || isCollapsed) {\n                this.reactive.dispatch(\n                    'sectionIndexCollapsed',\n                    [sectionId],\n                    !isCollapsed\n                );\n            }\n        }\n    }\n\n    /**\n     * Update section collapsed.\n     *\n     * @param {object} args\n     * @param {object} args.element The leement to be expanded\n     */\n    _refreshSectionCollapsed({element}) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unkown section with ID ${element.id}`);\n        }\n        // Check if it is already done.\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n        if (element.indexcollapsed !== isCollapsed) {\n            this._expandSectionNode(element);\n        }\n    }\n\n    /**\n     * Expand a section node.\n     *\n     * By default the method will use element.indexcollapsed to decide if the\n     * section is opened or closed. However, using forceValue it is possible\n     * to open or close a section independant from the indexcollapsed attribute.\n     *\n     * @param {Object} element the course module state element\n     * @param {boolean} forceValue optional forced expanded value\n     */\n    _expandSectionNode(element, forceValue) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\n        if (!collapsibleId) {\n            return;\n        }\n        collapsibleId = collapsibleId.replace('#', '');\n        const collapsible = document.getElementById(collapsibleId);\n        if (!collapsible) {\n            return;\n        }\n\n        if (forceValue === undefined) {\n            forceValue = (element.indexcollapsed) ? false : true;\n        }\n\n        if (forceValue) {\n            Collapse.getOrCreateInstance(collapsible, {toggle: false}).show();\n        } else {\n            Collapse.getOrCreateInstance(collapsible, {toggle: false}).hide();\n        }\n    }\n\n    /**\n     * Ensure a hash change is triggered.\n     *\n     * @param {Event} event\n     */\n    _triggerHashChange(event) {\n        const targetUrl = event.target.closest(\"a\")?.href;\n        if ((targetUrl == location.href) || (targetUrl == location.hash)) {\n            window.dispatchEvent(new HashChangeEvent(\"hashchange\", {oldURL: location.href, newURL: location.href}));\n        }\n    }\n\n    /**\n     * Handle a page item update.\n     *\n     * Expand sections containing the page item if necessary, scroll to it, and highlight it.\n     *\n     * @param {Object} details the update details\n     * @param {Object} details.state the state data.\n     * @param {Object} details.element the course state data.\n     */\n    async _refreshPageItem({element, state}) {\n        this._refreshPageItemGivenItem(state, element.pageItem);\n    }\n\n    /**\n     * Handle a page item update.\n     *\n     * Expand sections containing the page item if necessary, scroll to it, and highlight it.\n     *\n     * @param {Object} state\n     * @param {Object|null} pageItem\n     * @param {bool} expand\n     * @param {bool} highlight\n     */\n    async _refreshPageItemGivenItem(state, pageItem, expand = pageItem?.isStatic, highlight = true) {\n        if (highlight) {\n            // Unhighlight the old page item.\n            this.element.querySelector(\".\" + this.classes.PAGEITEM)?.classList.toggle(this.classes.PAGEITEM, false);\n        }\n\n        if (!pageItem) {\n            return;\n        }\n\n        // Find the element for the new page item.\n        let targetDom = this.getElement(\"[data-for=\" + pageItem.type + \"]\", pageItem.id);\n        if (!targetDom) {\n            return;\n        }\n\n        // Either expand the sections containing the page item,\n        // or change the page item to something not collapsed.\n        let containerDom = targetDom;\n        let sectionDom = null;\n        let haveCollapsedSections = false;\n        while ((sectionDom = containerDom.closest(this.selectors.SECTION))) {\n            if (sectionDom.querySelector(this.selectors.COLLAPSE).classList.contains(this.classes.COLLAPSED)) {\n                haveCollapsedSections = true;\n                if (expand) {\n                    const section = state.section.get(sectionDom.dataset.id);\n                    this._expandSectionNode(section, true);\n                } else {\n                    targetDom = sectionDom;\n                }\n            }\n            containerDom = sectionDom.parentNode;\n        }\n\n        if (highlight) {\n            // Highlight the new page item.\n            (targetDom.querySelector(this.selectors.SECTION_ITEM) ?? targetDom).classList.toggle(this.classes.PAGEITEM, true);\n        }\n\n        // Wait for collapsed sections to open, and scroll to the page item.\n        if (expand && haveCollapsedSections) {\n            const pendingOpen = new Pending(`courseformat/courseindex:refreshPageItem`);\n            setTimeout(() => {\n                targetDom.scrollIntoView({block: (pageItem.type == \"section\") ? \"start\" : \"center\"});\n                pendingOpen.resolve();\n            }, 250);\n        } else if (expand) {\n            targetDom.scrollIntoView({block: (pageItem.type == \"section\") ? \"start\" : \"center\"});\n        } else if (!this.reactive.isEditing) {\n            targetDom.scrollIntoView({block: \"nearest\"});\n        }\n    }\n\n    /**\n     * Expand a section if the current page is a section's cm.\n     *\n     * @private\n     * @param {Object} state the course state.\n     */\n    _expandPageCmSectionIfNecessary(state) {\n        let pageItem = null;\n        const pageCmInfo = this.reactive.getPageAnchorCmInfo();\n        const sectionId = window.location.hash.match(/^#sectionid-(\\d+)-title$/)?.[1]\n                        ?? window.location.href.match(/\\/section.php\\?id=(\\d+)\\b/)?.[1]\n                        ?? window.location.search.match(/\\bsectionid=(\\d+)\\b/)?.[1];\n        if (pageCmInfo) {\n            pageItem = {type: \"cm\", id: pageCmInfo.id, isStatic: false};\n        } else if (sectionId) {\n            pageItem = {type: \"section\", id: sectionId, isStatic: false};\n        }\n\n        if (pageItem) {\n            this._refreshPageItemGivenItem(state, pageItem, true, false);\n        }\n    }\n\n    /**\n     * Create a newcm instance.\n     *\n     * @param {object} param\n     * @param {Object} param.state\n     * @param {Object} param.element\n     */\n    async _createCm({state, element}) {\n        // Create a fake node while the component is loading.\n        const fakeelement = document.createElement('li');\n        fakeelement.classList.add('bg-pulse-grey', 'w-100');\n        fakeelement.innerHTML = '&nbsp;';\n        this.cms[element.id] = fakeelement;\n        // Place the fake node on the correct position.\n        this._refreshSectionCmlist({\n            state,\n            element: state.section.get(element.sectionid),\n        });\n        // Collect render data.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.cm(state, element);\n        // Create the new content.\n        const newcomponent = await this.renderComponent(fakeelement, 'core_courseformat/local/courseindex/cm', data);\n        // Replace the fake node with the real content.\n        const newelement = newcomponent.getElement();\n        this.cms[element.id] = newelement;\n        fakeelement.parentNode.replaceChild(newelement, fakeelement);\n    }\n\n    /**\n     * Create a new section instance.\n     *\n     * @param {Object} details the update details.\n     * @param {Object} details.state the state data.\n     * @param {Object} details.element the element data.\n     */\n    async _createSection({state, element}) {\n        // Create a fake node while the component is loading.\n        const fakeelement = document.createElement('div');\n        fakeelement.classList.add('bg-pulse-grey', 'w-100');\n        fakeelement.innerHTML = '&nbsp;';\n        this.sections[element.id] = fakeelement;\n        // Place the fake node on the correct position.\n        this._refreshCourseSectionlist({\n            state,\n            element: state.course,\n        });\n        // Collect render data.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.section(state, element);\n        // Create the new content.\n        const newcomponent = await this.renderComponent(fakeelement, 'core_courseformat/local/courseindex/section', data);\n        // Replace the fake node with the real content.\n        const newelement = newcomponent.getElement();\n        this.sections[element.id] = newelement;\n        fakeelement.parentNode.replaceChild(newelement, fakeelement);\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {object} param\n     * @param {Object} param.element\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const listparent = this.getElement(this.selectors.SECTION_CMLIST, element.id);\n        if (!listparent) {\n            return;\n        }\n        this._fixOrder(listparent, cmlist, this.cms);\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {object} param\n     * @param {Object} param.state\n     */\n    _refreshCourseSectionlist({state}) {\n        const sectionlist = this.reactive.getExporter().listedSectionIds(state);\n        this._fixOrder(this.element, sectionlist, this.sections);\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {Array} allitems the list of html elements that can be placed in the container\n     */\n    _fixOrder(container, neworder, allitems) {\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            const item = allitems[itemid];\n            // Get the current element at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined && item != undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item && item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            container.removeChild(container.lastChild);\n        }\n    }\n\n    /**\n     * Remove a cm from the list.\n     *\n     * The actual DOM element removal is delegated to the cm component.\n     *\n     * @param {object} param\n     * @param {Object} param.element\n     */\n    _deleteCm({element}) {\n        delete this.cms[element.id];\n    }\n\n    /**\n     * Remove a section from the list.\n     *\n     * The actual DOM element removal is delegated to the section component.\n     *\n     * @param {Object} details the update details.\n     * @param {Object} details.element the element data.\n     */\n    _deleteSection({element}) {\n        delete this.sections[element.id];\n    }\n}\n"],"names":["Component","BaseComponent","create","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","CM","TOGGLER","COLLAPSE","DRAWER","classes","SECTIONHIDDEN","CMHIDDEN","SECTIONCURRENT","COLLAPSED","SHOW","PAGEITEM","sections","cms","target","element","document","querySelector","debug","getElementById","this","reactive","stateReady","state","addEventListener","_sectionTogglers","_triggerHashChange","getElements","forEach","section","dataset","id","cm","_expandPageCmSectionIfNecessary","_refreshPageItemGivenItem","course","pageItem","contentTree","ContentTree","isEditing","getWatchers","watch","handler","_refreshSectionCollapsed","_createCm","_deleteCm","_createSection","_deleteSection","_refreshPageItem","_refreshCourseSectionlist","_refreshSectionCmlist","event","sectionlink","closest","isChevron","toggler","isCollapsed","classList","contains","sectionId","getAttribute","dispatch","getElement","Error","indexcollapsed","_expandSectionNode","forceValue","collapsibleId","replace","collapsible","undefined","getOrCreateInstance","toggle","show","hide","targetUrl","_event$target$closest","href","location","hash","window","dispatchEvent","HashChangeEvent","oldURL","newURL","expand","isStatic","highlight","targetDom","type","containerDom","sectionDom","haveCollapsedSections","get","parentNode","pendingOpen","Pending","setTimeout","scrollIntoView","block","resolve","pageCmInfo","getPageAnchorCmInfo","match","_window$location$hash2","_window$location$href","search","_window$location$sear","fakeelement","createElement","add","innerHTML","sectionid","data","getExporter","newelement","renderComponent","replaceChild","cmlist","listparent","_fixOrder","sectionlist","listedSectionIds","container","neworder","allitems","length","remove","itemid","index","item","currentitem","children","insertBefore","append","removeChild","lastChild"],"mappings":"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"}