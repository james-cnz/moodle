{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/content\n * @class      core_courseformat/local/content\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport Collapse from 'theme_boost/bootstrap/collapse';\nimport {throttle, debounce} from 'core/utils';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport Config from 'core/config';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'core_courseformat/local/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\nimport Fragment from 'core/fragment';\nimport Templates from 'core/templates';\nimport DispatchActions from 'core_courseformat/local/content/actions';\nimport * as CourseEvents from 'core_course/events';\nimport Pending from 'core/pending';\nimport log from \"core/log\";\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        // Optional component name for debugging.\n        this.name = 'course_format';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_title']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n            CM: `[data-for='cmitem']`,\n            TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\n            COLLAPSE: `[data-bs-toggle=\"collapse\"]`,\n            TOGGLEALL: `[data-toggle=\"toggleall\"]`,\n            // Formats can override the activity tag but a default one is needed to create new elements.\n            ACTIVITYTAG: 'li',\n            SECTIONTAG: 'li',\n        };\n        this.selectorGenerators = {\n            cmNameFor: (id) => `[data-cm-name-for='${id}']`,\n            sectionNameFor: (id) => `[data-section-name-for='${id}']`,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            COLLAPSED: `collapsed`,\n            // Course content classes.\n            ACTIVITY: `activity`,\n            STATEDREADY: `stateready`,\n            SECTION: `section`,\n        };\n        // Array to save dettached elements during element resorting.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n        // Index of sections and cms components.\n        this.sections = {};\n        this.cms = {};\n        // The page section return.\n        this.sectionReturn = descriptor.sectionReturn ?? null;\n        this.debouncedReloads = new Map();\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        let element = document.querySelector(target);\n        // TODO Remove this if condition as part of MDL-83851.\n        if (!element) {\n            log.debug('Init component with id is deprecated, use a query selector instead.');\n            element = document.getElementById(target);\n        }\n        return new this({\n            element,\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Collapse/Expand all sections button.\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n        if (toogleAll) {\n\n            // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\n            const collapseElements = this.getElements(this.selectors.COLLAPSE);\n            const collapseElementIds = [...collapseElements].map(element => element.id);\n            toogleAll.setAttribute('aria-controls', collapseElementIds.join(' '));\n\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\n            this.addEventListener(toogleAll, 'keydown', e => {\n                // Collapse/expand all sections when Space key is pressed on the toggle button.\n                if (e.key === ' ') {\n                    this._allSectionToggler(e);\n                }\n            });\n            this._refreshAllSectionsToggler(state);\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                this._newDispatchActions();\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            document,\n            \"scroll\",\n            throttle(this._scrollHandler.bind(this), 50)\n        );\n    }\n\n    /**\n     * Create a new DispatchActions object.\n     *\n     * @return {DispatchActions} the new object\n     */\n    _newDispatchActions() {\n        return new DispatchActions(this);\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _sectionTogglers(event) {\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        const closestCollapse = event.target.closest(this.selectors.COLLAPSE);\n        // Assume that chevron is the only collapse toggler in a section heading;\n        // I think this is the most efficient way to verify at the moment.\n        const isChevron = closestCollapse?.closest(this.selectors.SECTION_ITEM);\n\n        if (sectionlink || isChevron) {\n\n            const section = event.target.closest(this.selectors.SECTION);\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            let isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n            // If the click was on the chevron, Bootstrap already toggled the section before this event.\n            if (isChevron) {\n                isCollapsed = !isCollapsed;\n            }\n\n            const sectionId = section.getAttribute('data-id');\n            this.reactive.dispatch(\n                'sectionContentCollapsed',\n                [sectionId],\n                !isCollapsed,\n            );\n        }\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        const course = this.reactive.get('course');\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            course.sectionlist ?? [],\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Section return is a global page variable but most formats define it just before start printing\n        // the course content. This is the reason why we define this page setting here.\n        this.reactive.sectionReturn = this.sectionReturn;\n\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.stealth:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n            {watch: `cm.indent:updated`, handler: this._reloadCm},\n            {watch: `cm.groupmode:updated`, handler: this._reloadCm},\n            {watch: `cm.name:updated`, handler: this._refreshCmName},\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            {watch: `section.title:updated`, handler: this._refreshSectionTitle},\n            // Collapse and expand sections.\n            {watch: `section.contentcollapsed:updated`, handler: this._refreshSectionCollapsed},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Section visibility.\n            {watch: `section.visible:updated`, handler: this._reloadSection},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n        ];\n    }\n\n    /**\n     * Update a course module name on the whole page.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCmName({element}) {\n        // Update classes.\n        // Replace the text content of the cm name.\n        const allCmNamesFor = this.getElements(\n            this.selectorGenerators.cmNameFor(element.id)\n        );\n        allCmNamesFor.forEach((cmNameFor) => {\n            cmNameFor.textContent = element.name;\n        });\n    }\n\n    /**\n     * Update section collapsed state via bootstrap if necessary.\n     *\n     * Formats that do not use bootstrap must override this method in order to keep the section\n     * toggling working.\n     *\n     * @param {object} args\n     * @param {Object} args.state The state data\n     * @param {Object} args.element The element to update\n     */\n    _refreshSectionCollapsed({state, element}) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unknown section with ID ${element.id}`);\n        }\n        // Check if it is already done.\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n        if (element.contentcollapsed !== isCollapsed) {\n            let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\n            if (!collapsibleId) {\n                return;\n            }\n            collapsibleId = collapsibleId.replace('#', '');\n            const collapsible = document.getElementById(collapsibleId);\n            if (!collapsible) {\n                return;\n            }\n            if (element.contentcollapsed) {\n                Collapse.getOrCreateInstance(collapsible, {toggle: false}).hide();\n            } else {\n                Collapse.getOrCreateInstance(collapsible, {toggle: false}).show();\n            }\n        }\n\n        this._refreshAllSectionsToggler(state);\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n\n        const sectionIsCollapsible = this._getCollapsibleSections();\n\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        state.section.forEach(\n            section => {\n                if (sectionIsCollapsible[section.id]) {\n                    allcollapsed = allcollapsed && section.contentcollapsed;\n                    allexpanded = allexpanded && !section.contentcollapsed;\n                }\n            }\n        );\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n\n    /**\n     * Find collapsible sections.\n     */\n    _getCollapsibleSections() {\n        let sectionIsCollapsible = {};\n        const togglerDoms = this.element.querySelectorAll(this.selectors.COLLAPSE);\n        for (let togglerDom of togglerDoms) {\n            const headerDom = togglerDom.closest(this.selectors.SECTION_ITEM);\n            if (headerDom) {\n                sectionIsCollapsible[headerDom.dataset.id] = true;\n            }\n        }\n        return sectionIsCollapsible;\n    }\n\n    /**\n     * Setup the component to start a transaction.\n     *\n     * Some of the course actions replaces the current DOM element with a new one before updating the\n     * course state. This means the component cannot preload any index properly until the transaction starts.\n     *\n     */\n    _startProcessing() {\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\n        // need to store somewhare in case they are needed later.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n    }\n\n    /**\n     * Activity manual completion listener.\n     *\n     * @param {Event} event the custom ecent\n     */\n    _completionHandler({detail}) {\n        if (detail === undefined) {\n            return;\n        }\n        this.reactive.dispatch('cmCompletion', [detail.cmid], detail.completed);\n    }\n\n    /**\n     * Check the current page scroll and update the active element if necessary.\n     */\n    _scrollHandler() {\n        const pageOffset = window.scrollY;\n        const items = this.reactive.getExporter().allItemsArray(this.reactive.state);\n        // Check what is the active element now.\n        let pageItem = null;\n        items.every(item => {\n            const index = (item.type === 'section') ? this.sections : this.cms;\n            if (index[item.id] === undefined) {\n                return true;\n            }\n\n            const element = index[item.id].element;\n            pageItem = item;\n            return pageOffset >= element.offsetTop;\n        });\n        if (pageItem) {\n            this.reactive.dispatch('setPageItem', pageItem.type, pageItem.id);\n        }\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '') {\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Update a course section name on the whole page.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionTitle({element}) {\n        // Replace the text content of the section name in the whole page.\n        const allSectionNamesFor = document.querySelectorAll(\n            this.selectorGenerators.sectionNameFor(element.id)\n        );\n        allSectionNamesFor.forEach((sectionNameFor) => {\n            sectionNameFor.textContent = element.title;\n        });\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {Object} param\n     * @param {Object} param.state the full state object.\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionCmlist({state, element}) {\n        const cmlist = element.cmlist ?? [];\n        const section = this.getElement(this.selectors.SECTION, element.id);\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n        // A method to create a fake element to be replaced when the item is ready.\n        const createCm = this._createCmItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedCms, createCm);\n        }\n        this._refreshAllSectionsToggler(state);\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.state the full state object.\n     */\n    _refreshCourseSectionlist({state}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn !== null) {\n            return;\n        }\n        const sectionlist = this.reactive.getExporter().listedSectionIds(state);\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n        this._refreshAllSectionsToggler(state);\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            this._newSection\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            this._newCmItem\n        );\n    }\n\n    /**\n     * Create a new Section object.\n     *\n     * @param {Object} item the constructor data\n     * @return {Section} the new object\n     */\n    _newSection(item) {\n        return new Section(item);\n    }\n\n    /**\n     * Create a new CM object.\n     *\n     * @param {Object} item the constructor data\n     * @return {CmItem} the new object\n     */\n    _newCmItem(item) {\n        return new CmItem(item);\n    }\n\n    /**\n     * Reindex a content (section or cm) of the course content.\n     *\n     * This method is used internally by _indexContents.\n     *\n     * @param {string} selector the DOM selector to scan\n     * @param {*} index the index attribute to update\n     * @param {*} creationhandler method to create a new indexed element\n     */\n    _scanIndex(selector, index, creationhandler) {\n        const items = this.getElements(`${selector}:not([data-indexed])`);\n        items.forEach((item) => {\n            if (!item?.dataset?.id) {\n                return;\n            }\n            // Delete previous item component.\n            if (index[item.dataset.id] !== undefined) {\n                index[item.dataset.id].unregister();\n            }\n            // Create the new component.\n            index[item.dataset.id] = creationhandler({\n                ...this,\n                element: item,\n            });\n            // Mark as indexed.\n            item.dataset.indexed = true;\n        });\n    }\n\n    /**\n     * Reload a course module contents.\n     *\n     * Most course module HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the module.\n     *\n     * @param {object} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadCm({element}) {\n        if (!this.getElement(this.selectors.CM, element.id)) {\n            return;\n        }\n        const debouncedReload = this._getDebouncedReloadCm(element.id);\n        debouncedReload();\n    }\n\n    /**\n     * Generate or get a reload CM debounced function.\n     * @param {Number} cmId\n     * @returns {Function} the debounced reload function\n     */\n    _getDebouncedReloadCm(cmId) {\n        const pendingKey = `courseformat/content:reloadCm_${cmId}`;\n        let debouncedReload = this.debouncedReloads.get(pendingKey);\n        if (debouncedReload) {\n            return debouncedReload;\n        }\n        const reload = () => {\n            const pendingReload = new Pending(pendingKey);\n            this.debouncedReloads.delete(pendingKey);\n            const cmitem = this.getElement(this.selectors.CM, cmId);\n            if (!cmitem) {\n                return pendingReload.resolve();\n            }\n            const promise = Fragment.loadFragment(\n                'core_courseformat',\n                'cmitem',\n                Config.courseContextId,\n                {\n                    id: cmId,\n                    courseid: Config.courseId,\n                    sr: this.reactive.sectionReturn ?? null,\n                }\n            );\n            promise.then((html, js) => {\n                // Other state change can reload the CM or the section before this one.\n                if (!document.contains(cmitem)) {\n                    pendingReload.resolve();\n                    return false;\n                }\n                Templates.replaceNode(cmitem, html, js);\n                this._indexContents();\n                pendingReload.resolve();\n                return true;\n            }).catch(() => {\n                pendingReload.resolve();\n            });\n            return pendingReload;\n        };\n        debouncedReload = debounce(\n            reload,\n            200,\n            {\n                cancel: true, pending: true\n            }\n        );\n        this.debouncedReloads.set(pendingKey, debouncedReload);\n        return debouncedReload;\n    }\n\n    /**\n     * Cancel the active reload CM debounced function, if any.\n     * @param {Number} cmId\n     */\n    _cancelDebouncedReloadCm(cmId) {\n        const pendingKey = `courseformat/content:reloadCm_${cmId}`;\n        const debouncedReload = this.debouncedReloads.get(pendingKey);\n        if (!debouncedReload) {\n            return;\n        }\n        debouncedReload.cancel();\n        this.debouncedReloads.delete(pendingKey);\n    }\n\n    /**\n     * Reload a course section contents.\n     *\n     * Section HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the section.\n     *\n     * @param {details} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadSection({element}) {\n        const pendingReload = new Pending(`courseformat/content:reloadSection_${element.id}`);\n        const sectionitem = this.getElement(this.selectors.SECTION, element.id);\n        if (sectionitem) {\n            // Cancel any pending reload because the section will reload cms too.\n            for (const cmId of element.cmlist) {\n                this._cancelDebouncedReloadCm(cmId);\n            }\n            const promise = Fragment.loadFragment(\n                'core_courseformat',\n                'section',\n                Config.courseContextId,\n                {\n                    id: element.id,\n                    courseid: Config.courseId,\n                    sr: this.reactive.sectionReturn ?? null,\n                }\n            );\n            promise.then((html, js) => {\n                Templates.replaceNode(sectionitem, html, js);\n                this._indexContents();\n                pendingReload.resolve();\n            }).catch(() => {\n                pendingReload.resolve();\n            });\n        }\n    }\n\n    /**\n     * Create a new course module item in a section.\n     *\n     * Thos method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} cmid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createCmItem(container, cmid) {\n        const newItem = document.createElement(this.selectors.ACTIVITYTAG);\n        newItem.dataset.for = 'cmitem';\n        newItem.dataset.id = cmid;\n        // The legacy actions.js requires a specific ID and class to refresh the CM.\n        newItem.id = `module-${cmid}`;\n        newItem.classList.add(this.classes.ACTIVITY);\n        container.append(newItem);\n        this._reloadCm({\n            element: this.reactive.get('cm', cmid),\n        });\n        return newItem;\n    }\n\n    /**\n     * Create a new section item.\n     *\n     * This method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} sectionid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createSectionItem(container, sectionid) {\n        const section = this.reactive.get('section', sectionid);\n        const newItem = document.createElement(this.selectors.SECTIONTAG);\n        newItem.dataset.for = 'section';\n        newItem.dataset.id = sectionid;\n        newItem.dataset.number = section.number;\n        // The legacy actions.js requires a specific ID and class to refresh the section.\n        newItem.id = `section-${sectionid}`;\n        newItem.classList.add(this.classes.SECTION);\n        container.append(newItem);\n        this._reloadSection({\n            element: section,\n        });\n        return newItem;\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixOrder(container, neworder, selector, dettachedelements, createMethod) {\n        if (container === undefined) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (item === undefined) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Remove the remaining elements.\n        const orphanElements = [];\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            // Any orphan element is always displayed after the listed elements.\n            // Also, some third-party plugins can use a fake dndupload-preview indicator.\n            if (lastchild?.classList?.contains('dndupload-preview') || lastchild.dataset?.orphan) {\n                orphanElements.push(lastchild);\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore orphan elements.\n        orphanElements.forEach((element) => {\n            container.append(element);\n        });\n    }\n}\n"],"names":["Component","BaseComponent","create","descriptor","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","TOGGLER","COLLAPSE","TOGGLEALL","ACTIVITYTAG","SECTIONTAG","selectorGenerators","cmNameFor","id","sectionNameFor","classes","COLLAPSED","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","sectionReturn","debouncedReloads","Map","target","element","document","querySelector","debug","getElementById","this","reactive","stateReady","state","_indexContents","addEventListener","_sectionTogglers","toogleAll","getElement","collapseElementIds","getElements","map","setAttribute","join","_allSectionToggler","e","key","_refreshAllSectionsToggler","supportComponents","isEditing","_newDispatchActions","classList","add","CourseEvents","manualCompletionToggled","_completionHandler","_scrollHandler","bind","DispatchActions","event","sectionlink","closest","closestCollapse","isChevron","section","toggler","isCollapsed","contains","sectionId","getAttribute","dispatch","preventDefault","isAllCollapsed","course","get","sectionlist","getWatchers","watch","handler","_reloadCm","_refreshCmName","_refreshSectionNumber","_refreshSectionTitle","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_reloadSection","forEach","textContent","Error","contentcollapsed","collapsibleId","dataset","replace","collapsible","getOrCreateInstance","toggle","hide","show","sectionIsCollapsible","_getCollapsibleSections","allcollapsed","allexpanded","remove","togglerDoms","querySelectorAll","togglerDom","headerDom","detail","undefined","cmid","completed","pageOffset","window","scrollY","items","getExporter","allItemsArray","pageItem","every","item","index","type","offsetTop","number","sectionid","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","title","cmlist","listparent","createCm","_createCmItem","_fixOrder","listedSectionIds","createSection","_createSectionItem","_scanIndex","_newSection","_newCmItem","Section","CmItem","selector","creationhandler","_item$dataset","unregister","indexed","_getDebouncedReloadCm","debouncedReload","cmId","pendingKey","pendingReload","Pending","delete","cmitem","resolve","Fragment","loadFragment","Config","courseContextId","courseid","courseId","sr","then","html","js","replaceNode","catch","cancel","pending","set","_cancelDebouncedReloadCm","sectionitem","container","newItem","createElement","for","append","neworder","dettachedelements","createMethod","length","innerHTML","itemid","currentitem","children","insertBefore","orphanElements","lastchild","lastChild","_lastchild$dataset","orphan","push","_lastchild$dataset2","removeChild"],"mappings":"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"}